````markdown
# Proyecto Veterinaria EdÃ©n

Este repositorio contiene la implementaciÃ³n en Java de un sistema de gestiÃ³n para la Veterinaria EdÃ©n. A continuaciÃ³n encontrarÃ¡s el plan de acciÃ³n con las tareas ordenadas desde el inicio hasta la culminaciÃ³n del cÃ³digo.

---

## ðŸ“‹ Tabla de Contenidos

1. [DescripciÃ³n del Proyecto](#descripciÃ³n-del-proyecto)  
2. [Estructura del Repositorio](#estructura-del-repositorio)  
3. [Plan de AcciÃ³n](#plan-de-acciÃ³n)  
4. [CÃ³mo Contribuir](#cÃ³mo-contribuir)  
5. [Licencia](#licencia)  

---

## DescripciÃ³n del Proyecto

La veterinaria EdÃ©n necesita un software que permita:
- Registrar responsables (dueÃ±os) y sus mascotas (perros, gatos, aves).  
- Gestionar servicios veterinarios (consulta, baÃ±o, vacuna, cirugÃ­a, urgencia, hospitalizaciÃ³n).  
- Llevar un registro de atenciones y generar facturas.  
- Mostrar informes y estadÃ­sticas a travÃ©s de un menÃº de consola.

---

## Estructura del Repositorio

```plaintext
VeterinariaEden/
â”œâ”€â”€ README.md
â”œâ”€â”€ .gitignore
â”œâ”€â”€ src/
â”‚   â””â”€â”€ modelo/
â”‚       â”œâ”€â”€ Persona.java
â”‚       â”œâ”€â”€ Responsable.java
â”‚       â”œâ”€â”€ Mascota.java
â”‚       â”œâ”€â”€ Perro.java
â”‚       â”œâ”€â”€ Gato.java
â”‚       â””â”€â”€ Ave.java
â”‚   â””â”€â”€ servicio/
â”‚       â”œâ”€â”€ ServicioVeterinario.java
â”‚       â”œâ”€â”€ Consulta.java
â”‚       â”œâ”€â”€ Bano.java
â”‚       â”œâ”€â”€ Vacuna.java
â”‚       â”œâ”€â”€ Cirugia.java
â”‚       â”œâ”€â”€ Urgencia.java
â”‚       â””â”€â”€ Hospitalizacion.java
â”‚   â””â”€â”€ registro/
â”‚       â”œâ”€â”€ RegistroAtencion.java
â”‚       â””â”€â”€ Factura.java
â”‚   â””â”€â”€ ui/
â”‚       â””â”€â”€ MenuPrincipal.java
â””â”€â”€ docs/
    â””â”€â”€ diagramas/
        â””â”€â”€ diagrama_clases.png
````

---

## Plan de AcciÃ³n

Sigue estas tareas en orden para avanzar de lo mÃ¡s bÃ¡sico a lo mÃ¡s complejo:

1. **InicializaciÃ³n y configuraciÃ³n**

   * Crear repositorio en GitHub (`VeterinariaEden`).

2. **Modelo de dominio â€“ Clases base**

   1. `Persona.java`

      * Definir atributos: `identificacion`, `nombre`, `apellido`.
      * Crear constructor, getters/setters y mÃ©todo `identificar()`.
   2. `Responsable.java`

      * Heredar de `Persona`.
      * AÃ±adir `direccion`, `telefono`, `correo` y lista de `Mascota`.
      * Implementar `agregarMascota()` y override de `identificar()`.
   3. `Mascota.java` (abstracta)

      * Atributos: `registro`, `nombre`, `fechaNacimiento`, `raza`, `Responsable`.
      * MÃ©todo abstracto `identificar()`.
   4. Subclases de `Mascota`:

      * `Perro.java` (patas, cola, pedigree)
      * `Gato.java` (patas, cola)
      * `Ave.java` (patas, alas)
      * Implementar constructores, getters/setters y `identificar()`.

3. **Relaciones y pruebas unitarias bÃ¡sicas**

   * Escribir un `main` o tests simples que:

     * Creen un `Responsable`.
     * Creen varias `Mascota` y las asocien.
     * Impriman resultados de `identificar()`.

4. **MÃ³dulo de servicios veterinarios**

   1. `ServicioVeterinario.java` (interfaz o clase abstracta)

      * Atributos comunes: fecha, motivo, mascota, asistente, estado.
      * MÃ©todos: `iniciar()`, `finalizar()`, `calcularCosto()`.
   2. Subclases concretas:

      * `Consulta.java`, `Bano.java`, `Vacuna.java`, `Cirugia.java`, `Urgencia.java`, `Hospitalizacion.java`.
      * Implementar `calcularCosto()` segÃºn reglas de negocio.

5. **Registro de atenciones y facturaciÃ³n**

   1. `RegistroAtencion.java`

      * Guardar fecha de ingreso, servicio, estatus, asistente.
      * MÃ©todos para actualizar estado y recuperar historial.
   2. `Factura.java`

      * Asociar a un `RegistroAtencion` o `ServicioVeterinario`.
      * Generar detalle y monto total.

6. **MenÃº de interfaz de usuario (consola)**

   * `MenuPrincipal.java` con opciones:

     1. Mostrar mascotas atendidas por tipo de servicio.
     2. Listar mascotas atendidas para un servicio X.
     3. Listar mascotas por propietario.
     4. Listar mascotas por tipo (perro, gato, ave).
     5. Mostrar distribuciÃ³n porcentual por tipo de servicio.
     6. Mostrar distribuciÃ³n porcentual por tipo de mascota.
   * Validar entradas del usuario y mostrar resultados en consola.

## Licencia

Este proyecto estÃ¡ bajo la licencia MIT. Consulta el archivo [LICENSE](LICENSE) para mÃ¡s detalles.

```
```

